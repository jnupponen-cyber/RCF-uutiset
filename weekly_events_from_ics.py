#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
RCF Weekly Events Digest from Sesh ICS (resilient + random intro, no per-event links)
- Hakee Seshin ICS-sy√∂tteen (/link)
- Laajentaa toistuvat (recurring_ical_events), fallback yksitt√§isiin
- Suodattaa kuluvan viikon (ma‚Äìsu) Europe/Helsinki
- Satunnainen uutis-intro (vaihtuu viikoittain)
- Ei per-tapahtuma-linkkej√§; loppuun Zwift Club -linkki
- Postaa Discordiin (rivinvaihdot s√§ilytt√§en, linkkikortit estetty)
"""

import os, random, traceback
from datetime import datetime, timedelta, time as dtime
import zoneinfo
import requests
from icalendar import Calendar
import discord

# Yritet√§√§n tuoda laajennuskirjasto ‚Äì jos ei onnistu, k√§ytet√§√§n fallbacki√§
try:
    import recurring_ical_events
    HAS_RECUR = True
except Exception:
    HAS_RECUR = False

TZ = os.getenv("TZ", "Europe/Helsinki")
tz = zoneinfo.ZoneInfo(TZ)

TARGET_CHANNEL_ID = int(os.environ["TARGET_CHANNEL_ID"])
SESH_ICS_URL = os.environ["SESH_ICS_URL"]

# Suomenkieliset viikonp√§iv√§lyhenteet (ma‚Äìsu)
WEEKDAYS_FI = {0: "Ma", 1: "Ti", 2: "Ke", 3: "To", 4: "Pe", 5: "La", 6: "Su"}

# Uutis-introt ‚Äì botti valitsee yhden viikoittain (oma listasi s√§ilytetty)
INTROS = [
    "‚òÄÔ∏è Hyv√§√§ huomenta, t√§ss√§ t√§m√§n viikon t√§rkeimm√§t tapahtumat.",
    "üì¶ Paketoituna ja valmiina: RCF-viikko yhdell√§ listalla.",
    "üì¢ Uutishuoneesta hyv√§√§ huomenta ‚Äì t√§ss√§ viikon nostoja.",
    "üéÆ Zwift Cheat Code: Yl√∂s, Yl√∂s, Alas, Alas, Vasen, Oikea, Vasen, Oikea, B, A, Start = FTP +200W",
    "üìª Juuri saamamme tiedon mukaan viikko n√§ytt√§√§ t√§lt√§:",
    "üßµ Hyv√§√§ huomenta, yhteislenkit ja kisat kootusti.",
    "üí° Vinkki: Sy√∂t√§ Zwiftin chatissa koodi /piss a party = peloton pys√§htyy pakolliselle vessatauolle.",
    "üß≠ Viikko p√§hkin√§nkuoressa: t√§m√§ kannattaa tiet√§√§.",
    "üíå Rakkauskirje Arvilta: t√§ss√§ tapahtumat. XOXO.",
    "ü•± Uusi viikko, uusia pettymyksi√§ ‚Äì t√§ss√§ kuitenkin tapahtumat.",
    "üìâ Odotukset matalalla, mutta ehk√§ t√§st√§ jotain l√∂ytyy.",
    "üôÑ Viikon ohjelma: kyll√§, taas n√§it√§ samoja juttuja.",
    "üïπÔ∏è Zwift-koodi: ‚Üë ‚Üë ‚Üì ‚Üì ‚Üê ‚Üí ‚Üê ‚Üí X, O, Start = Anti-gravity Tron bike.",
    "üíÄ Jos et jaksa treenata, niin koita ainakin jaksaa lukea t√§m√§ lista.",
    "üôÉ Spoileri: mukana on taas yhteislenkkej√§ ja kisoja, wow mik√§ yll√§tys.",
    "üö¥‚Äç‚ôÇÔ∏è Uusi viikko, samat painajaiset.",
    "üí° Pro Tip: Jos ei jaksa‚Ä¶ niin koittakaa vaan jaksaa. ‚Äì Niilo 22, RCF edition.",
    "üëë T√§m√§ lista on t√§rke√§mpi kuin kaikki maanantaipalaverit yhteens√§.",
    "ü•µ Treenit valmiina, tekosyyt loppuvat t√§h√§n.",
    "üîî Muistutus: kyll√§, n√§it√§ juttuja on joka viikko.",
    "üëª Boo! T√§ss√§ viikko-ohjelma. S√§ik√§hditk√∂? Hyv√§.",
    "üì¢ Viikon lista ‚Äì luultavasti t√§rke√§mpi kuin ty√∂kalenterisi.",
    "üôÉ No niin, uusi viikko, samat naamat ‚Äì t√§ss√§ viikko-ohjelma.",
    "üì∞ Ajankohtaista RCF:ss√§: viikon kooste."
]

# Pysyv√§ klubilinkki (footeriin). Kulmasulkeet + ZWSP + piste est√§v√§t korttiesikatselun.
ZWIFT_CLUB_URL = "https://www.zwift.com/clubs/3a01d4d1-3ca7-4ef6-8c93-9ec1b7ea783c/home"

# --- Apurit -----------------------------------------------------------------

def to_local(dt):
    """Palauta aika Europe/Helsinki -aikana."""
    if isinstance(dt, datetime):
        if dt.tzinfo is None:
            return dt.replace(tzinfo=tz)
        return dt.astimezone(tz)
    # All-day (pelkk√§ date) -> klo 00:00 paikallista
    return datetime.combine(dt, dtime(0, 0), tz)

def _get_dt(prop):
    """Hae dt arvo icalendar propertyst√§. Kest√§√§ listat ja puuttuvat tz:t."""
    if prop is None:
        return None
    if isinstance(prop, list) and prop:
        prop = prop[0]
    dt = getattr(prop, "dt", prop)
    return dt

# --- ICS-luku ---------------------------------------------------------------

def load_events_between_with_recurring(cal, start, end):
    """Prim√§√§ri polku: k√§yt√§ recurring_ical_events -kirjastoa."""
    occs = recurring_ical_events.of(cal).between(start, end)
    out = []
    for ev in occs:
        dt = ev.get('dtstart').dt
        dt = to_local(dt)
        title = str(ev.get('summary', '') or '').strip()
        loc = str(ev.get('location', '') or '').strip()
        if loc:
            title = f"{title} ({loc})"
        out.append((dt, title))
    out.sort(key=lambda x: x[0])
    return out

def load_events_between_fallback(cal, start, end):
    """Varapolku: k√§y l√§pi kaikki VEVENTit ja poimi yksitt√§iset tapaukset (ilman RRULE-laajennusta)."""
    out = []
    for ev in cal.walk('VEVENT'):
        dtstart_prop = ev.get('dtstart') or ev.get('DTSTART')
        dt = _get_dt(dtstart_prop)
        if dt is None:
            continue
        dt = to_local(dt)
        if not (start <= dt < end):
            continue
        title = str(ev.get('summary', '') or '').strip()
        loc = str(ev.get('location', '') or '').strip()
        if loc:
            title = f"{title} ({loc})"
        out.append((dt, title))
    out.sort(key=lambda x: x[0])
    return out

def load_events_between(url, start, end):
    print(f"[DEBUG] Ladataan ICS: {url}")
    print(f"[DEBUG] Aikav√§li: {start} ‚Äì {end}")
    r = requests.get(url, timeout=30)
    r.raise_for_status()
    cal = Calendar.from_ical(r.content)

    if HAS_RECUR:
        try:
            events = load_events_between_with_recurring(cal, start, end)
            print(f"[DEBUG] recurring_ical_events: l√∂ytyi {len(events)} esiintym√§√§")
            return events
        except Exception as e:
            print("[WARN ] recurring_ical_events kaatui, siirryt√§√§n fallbackiin.")
            print("       Syy:", repr(e))
            traceback.print_exc()

    events = load_events_between_fallback(cal, start, end)
    print(f"[DEBUG] Fallback VEVENT-luku: l√∂ytyi {len(events)} tapahtumaa (ilman RRULE-laajennusta)")
    return events

# --- Muotoilu ----------------------------------------------------------------

def format_digest(events, now: datetime):
    # Footer: klubilinkki (kulmasulkeet + ZWSP + piste -> ei korttia)
    footer = f"üîó Kaikki RCF:n Zwift-ajot l√∂ytyv√§t klubista: [Zwift Club](<{ZWIFT_CLUB_URL}>)\u200B."

    if not events:
        return "T√§ll√§ viikolla ei n√§yt√§ olevan kalenterissa tapahtumia. üö≤\n\n" + footer

    # Valitaan intro deterministisesti viikon numeron mukaan (vaihtuu viikoittain)
    week = now.isocalendar().week
    random.seed(week)
    intro = random.choice(INTROS)

    by_day = {}
    for dt, title in events:
        by_day.setdefault(dt.date(), []).append((dt, title))

    lines = [
        intro,
        "",
        "üóìÔ∏è **Ride Club Finland ‚Äì viikon tapahtumat**",
        ""
    ]
    for d in sorted(by_day):
        weekday = WEEKDAYS_FI[d.weekday()]
        lines.append(f"**{weekday} {d.strftime('%d.%m.')}**")
        for dt, title in sorted(by_day[d], key=lambda x: x[0]):
            lines.append(f"‚ÄÉ‚Ä¢ {dt.strftime('%H:%M')} ‚Äî {title}")
        lines.append("")

    lines.append(footer)
    return "\n".join(lines)

def chunk_by_lines(s: str, limit: int = 1900):
    """Pilkkoo viestin osiin s√§ilytt√§en rivinvaihdot (Discordin 2000 merk. raja huomioiden)."""
    parts, buf = [], ""
    for line in s.splitlines(True):  # s√§ilyt√§ \n
        if len(buf) + len(line) > limit:
            parts.append(buf)
            buf = ""
        buf += line
    if buf:
        parts.append(buf)
    return parts

# --- Discord -----------------------------------------------------------------

intents = discord.Intents.default()
client = discord.Client(intents=intents)

@client.event
async def on_ready():
    try:
        now = datetime.now(tz)
        monday = (now - timedelta(days=now.weekday())).replace(hour=0, minute=0, second=0, microsecond=0)
        next_monday = monday + timedelta(days=7)

        events = load_events_between(SESH_ICS_URL, monday, next_monday)
        digest = format_digest(events, now)

        ch = await client.fetch_channel(TARGET_CHANNEL_ID)
        for chunk in chunk_by_lines(digest):
            msg = await ch.send(chunk)
            # Tukahduta mahdolliset linkki-embed-kortit (footer-linkki)
            try:
                await msg.edit(suppress=True)
            except Exception:
                pass
    finally:
        await client.close()

if __name__ == "__main__":
    client.run(os.environ["DISCORD_TOKEN"])
